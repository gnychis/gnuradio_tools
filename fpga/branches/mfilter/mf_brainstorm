module shift_reg(input clk, input reset, input rxstrobe, 
                 input [15:0] in_sample, output wire [15:0] out_sample, 
                 input [2:0] sel, output reg [15:0] data);
  
    reg [15:0] shift [5:0];
    integer i;
    assign out_sample = shift[5];

    always @ (posedge clk)
        if(reset)
          begin
            for (i = 0; i< 6; i = i + 1)
                shift[i] <= 0;
          end
        else if (rxstrobe)
          begin
            for (i = 1; i< 6; i = i + 1)
                shift[i] <= shift[i-1];
            shift[0] <= in_sample;
          end

    always @ (posedge clk)
       case(sel)
         3'd0:    data <= shift[0];
         3'd1:    data <= shift[1];
         3'd2:    data <= shift[2];
         3'd3:    data <= shift[3];
         3'd4:    data <= shift[4];
         3'd5:    data <= shift[5];
         default: data <= 0;
       endcase

endmodule


module application()

    genvar i;
    wire [15:0] bridge_real[31:0];
    wire [15:0] bridge_img [31:0];
    reg [2:0] state;
    wire [15:0] data_real[31:0];
    wire [15:0] data_img [31:0];
    
    generate for (i = 1; i< 32; i = i + 1)
      begin : generate_shift_regs_real
      
        shift_reg sr (.clk(clk), .reset(reset), .rxstrobe(rxstrobe),
                      .in_sample(bridge_real[i-1]), .out_sample(bridge_real[i]),
                      .sel(state), .data(data_real[i]));
      end
    endgenerate

    generate for (i = 1; i< 32; i = i + 1)
      begin : generate_shift_regs_img
      
        shift_reg sr (.clk(clk), .reset(reset), .rxstrobe(rxstrobe),
                      .in_sample(bridge_img[i-1]), .out_sample(bridge_img[i]),
                      .sel(state), .data(data_img[i]));
      end
    endgenerate

    shift_reg sr_r0 (.clk(clk), .reset(reset), .rxstrobe(rxstrobe),
                     .in_sample(in_real), .out_sample(bridge_real[0]),
                     .sel(state), .data(data_real[0]));

    shift_reg sr_i0 (.clk(clk), .reset(reset), .rxstrobe(rxstrobe),
                     .in_sample(in_img), .out_sample(bridge_img[0]),
                     .sel(state), .data(data_img[0]));

    /* 
     * data_real/ data_img will contain data according to state:
     * state = 0: 0, 6, 12 ...
     * state = 1: 1, 7, 13 ...
     * state = i: i, i+1, ...
     */
 

endmodule
