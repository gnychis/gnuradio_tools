module shift_reg(input clk, input reset, input rxstrobe, 
                 input [15:0] in_sample, output wire [15:0] out_sample, 
                 input [2:0] sel, output wire [15:0] data);
  
    reg [15:0] shift [5:0];
    integer i;
    assign out_sample = shift[5];
    assign data = (sel[0]) ? ((sel[2]) ? shift[5] : (sel[1]) ? shift[3] : shift[1]) :  
                             ((sel[2]) ? shift[4] : (sel[1]) ? shift[2] : shift[0]) : 
    always @ (posedge clk)
        if(reset)
          begin
            for (i = 0; i< 6; i = i + 1)
                shift[i] <= 0;
          end
        else if (rxstrobe)
          begin
            for (i = 1; i< 6; i = i + 1)
                shift[i] <= shift[i-1];
            shift[0] <= in_sample;
          end

endmodule


module application()

    genvar i;
    wire [15:0] bridge_real[63:0];
    wire [15:0] bridge_img [63:0];
    reg [2:0] state;
    wire [15:0] data_real[63:0];
    wire [15:0] data_img [63:0];
    
    generate for (i = 1; i< 64; i = i + 1)
      begin : generate_shift_regs_real
      
        shift_reg sr (.clk(clk), .reset(reset), .rxstrobe(rxstrobe),
                      .in_sample(bridge_real[i-1]), .out_sample(bridge_real[i]),
                      .sel(state), .data(data_real[i]));
      end
    endgenerate

    generate for (i = 1; i< 64; i = i + 1)
      begin : generate_shift_regs_img
      
        shift_reg sr (.clk(clk), .reset(reset), .rxstrobe(rxstrobe),
                      .in_sample(bridge_img[i-1]), .out_sample(bridge_img[i]),
                      .sel(state), .data(data_img[i]));
      end
    endgenerate

    shift_reg sr_r0 (.clk(clk), .reset(reset), .rxstrobe(rxstrobe),
                     .in_sample(in_real), .out_sample(bridge_real[0]),
                     .sel(state), .data(data_real[0]));

    shift_reg sr_i0 (.clk(clk), .reset(reset), .rxstrobe(rxstrobe),
                     .in_sample(in_img), .out_sample(bridge_img[0]),
                     .sel(state), .data(data_img[0]));

    /* 
     * data_real/ data_img will contain data according to state:
     * state = 0: 0, 6, 12 ...
     * state = 1: 1, 7, 13 ...
     * state = i: i, i+1, ...
     */
 

endmodule
